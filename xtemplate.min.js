
/**
 * 在指定对象平级附加一个对象
 * @param newEl
 * @param targetEl
 */
function insertAfter(newEl, targetEl) {
    var parentEl = targetEl.parentNode;
    if (!parentEl) {
        return;
    }
    if (parentEl.lastChild == targetEl) {
        parentEl.appendChild(newEl);
    } else {
        parentEl.insertBefore(newEl, targetEl.nextSibling);
    }
}
/**
 * 取下一个节点
 * @param ele
 * @returns {*}
 */
function getNextSibling(ele) {
    if (ele.nextSibling) {
        if (ele.nextSibling.tagName == ele.tagName) {
            return ele.nextSibling;
        } else {
            return getNextSibling(ele.nextSibling)
        }
    } else {
        return false;
    }
}
/**
 * 给指定对象设置值
 * @param ele
 * @param value
 */
function setValue(ele, value) {
    switch (ele.tagName) {
        case 'BUTTON':
        case 'INPUT':
            ele.value = value;
            break;
        default:
            ele.innerText = value;
            break;
    }

}

/**
 * 取指定数组的值
 * @param i
 * @param keys
 * @param data
 * @returns {*}
 */
function getValue(i, keys, data) {
    if (i < keys.length - 1) {
        return getValue(i + 1, keys, data[keys[i]]);
    } else {
        if (data) {
            return data[keys[i]];
        } else {
            return '';
        }
    }
}

/**
 * 取扁平的字典值
 * @param key
 * @param data
 * @returns {*}
 */
function getNameValue(key, data) {
    var value = data[key];
    var type = typeof value;
    if (type == 'string' || type == 'number') {
        return [[key, value]];
    } else {
        var names = [];
        for (var k in value) {
            var tkv = getNameValue(k, value);
            for (var i = 0; i < tkv.length; i++) {
                names.push([key + '.' + tkv[i][0], tkv[i][1]]);
            }
        }
        return names;
    }
}

/**
 * 初始化语法结构
 * @param id 渲染器的有效范围id
 */
function initSynctax(items, cache) {
    for (var i = 0; i < items.length; i++) {
        var item = items[i];
        initRepeat(item, cache);
    }
}
/**
 * 处理循环
 * @param item
 */
function initRepeat(item, cache) {
    var id = item.attributes['data-repeat-name'];
    if (id) {
        item.style.display='none';
        cache['xd-repeat-' + id.value] = item;
    }
}


/**
 * 在指定对象平级附加一个对象
 * @param newEl
 * @param targetEl
 */
function insertAfter(newEl, targetEl) {
    var parentEl = targetEl.parentNode;
    if (!parentEl) {
        return;
    }
    if (parentEl.lastChild == targetEl) {
        parentEl.appendChild(newEl);
    } else {
        parentEl.insertBefore(newEl, targetEl.nextSibling);
    }
}
/**
 * 取下一个节点
 * @param ele
 * @returns {*}
 */
function getNextSibling(ele) {
    if (ele.nextSibling) {
        if (ele.nextSibling.tagName == ele.tagName) {
            return ele.nextSibling;
        } else {
            return getNextSibling(ele.nextSibling)
        }
    } else {
        return false;
    }
}
/**
 * 给指定对象设置值
 * @param ele
 * @param value
 */
function setValue(ele, value) {
    switch (ele.tagName) {
        case 'BUTTON':
        case 'INPUT':
            ele.value = value;
            break;
        default:
            ele.innerText = value;
            break;
    }

}

/**
 * 取指定数组的值
 * @param i
 * @param keys
 * @param data
 * @returns {*}
 */
function getValue(i, keys, data) {
    if (i < keys.length - 1) {
        return getValue(i + 1, keys, data[keys[i]]);
    } else {
        if (data) {
            return data[keys[i]];
        } else {
            return '';
        }
    }
}

/**
 * 取扁平的字典值
 * @param key
 * @param data
 * @returns {*}
 */
function getNameValue(key, data) {
    var value = data[key];
    var type = typeof value;
    if (type == 'string' || type == 'number') {
        return [[key, value]];
    } else {
        var names = [];
        for (var k in value) {
            var tkv = getNameValue(k, value);
            for (var i = 0; i < tkv.length; i++) {
                names.push([key + '.' + tkv[i][0], tkv[i][1]]);
            }
        }
        return names;
    }
}

/**
 * 初始化语法结构
 * @param id 渲染器的有效范围id
 */
function initSynctax(items, cache) {
    for (var i = 0; i < items.length; i++) {
        var item = items[i];
        initRepeat(item, cache);
    }
}
/**
 * 处理循环
 * @param item
 */
function initRepeat(item, cache) {
    var id = item.attributes['data-repeat-name'];
    if (id) {
        item.style.display='none';
        cache['xd-repeat-' + id.value] = item;
    }
}

/**
 * 渲染器
 */
function render() {
    //全局变量
    this.$scope = {};
    //缓存
    this.cache = {};
    //内部函数
    this.funcs = {};
    //初始化语法结构
    initSynctax(document.all, this.cache);
    //初始化自带的函数
    initFuncs(this.funcs);
}

/**
 * 绑定数据值
 * @param id 缓存范围的id
 * @param data 要绑定的数据
 */
render.prototype.bindData = function (data, name) {
    if (!name) {
        name = 'data';
    }
    if (!this.$scope[name]) {
        this.$scope[name] = {};
    }
    for (var key in data) {
        var kv = getNameValue(key, data);
        for (var i = 0; i < kv.length; i++) {
            this.$scope[name][kv[i][0]] = kv[i][1];
        }
    }
    for (var key in this.$scope[name]) {
        var items = document.getElementsByName(key);
        if (items) {
            for (var i = 0; i < items.length; i++) {
                setValue(items[i], this.$scope[name][key]);
                items[i].style.display = '';
            }
        }
    }
}
/**
 * 重新给某个对象绑定新的值
 * @param name
 * @param value
 */
render.prototype.bindName = function (name, value) {
    var items = document.getElementsByName(name);
    if (items) {
        this.$scope[name] = value;
        for (var i = 0; i < items.length; i++) {
            setValue(items[i], value);
            items[i].style.display = '';
        }
    }
}
/**
 * 循环绑定数据值
 * @param id 缓存范围的id
 * @param data 要绑定的数据
 */
render.prototype.bindRepeatData = function (data, id) {
    var item = this.cache['xd-repeat-' + id];
    if (!item) {
        return;
    }
    if (!data || data.length < 1) {
        return;
    }
    var nextItem = item;
    for (var i = 0; i < data.length; i++) {
        var tmp = getNextSibling(nextItem);
        if (!tmp) {
            tmp = document.createElement(item.tagName);
            insertAfter(tmp, nextItem);
        }
        tmp.innerHTML = this.runTemplate(item.innerHTML, data[i]);
        tmp.style.display = '';
        nextItem = tmp;
    }
    while ((nextItem = getNextSibling(nextItem)) != false) {
        nextItem.style.display = 'none';
    }
}
/**
 * 将数据与模块绑定
 * @param tmpl
 * @param data
 * @returns {XML|string|void}
 */
render.prototype.runTemplate = function (tmpl, data) {
    var i = 0, start = 0, end = 0, word, result = '';
    while (i < tmpl.length) {
        start = tmpl.indexOf('{', i);
        if (start != -1) {
            end = tmpl.indexOf('}', start + 1);
            if (end == -1) {
                end = tmpl.length;
            }
            word = tmpl.substring(start + 1, end);
            result += tmpl.substring(i, start);
            result += this.runData(word, data);
        } else {
            result += tmpl.substring(i);
            end = tmpl.length;
        }
        i = end + 1;
    }
    return result;
}
/**
 * 处理一个数据
 * @param tmpl
 * @param data
 * @returns {string}
 */
render.prototype.runData = function (tmpl, data) {
    var pipe = tmpl.split('|'), result = '', tmp;
    if (pipe.length > 0) {
        tmp = getValue(0, pipe[0].trim().split('.'), data);
        for (var i = 0; i < pipe.length; i++) {

        }
        result = tmp;
    }
    return result;
}
/**
 * 处理函数
 * @param funcString
 * @param val
 * @returns {*}
 */
render.prototype.runFunc = function (funcString, val) {
    var f = funcString.split(',');
    if (f.length > 0) {
        var func = this.funcs[f[0]];
        if (func) {
            return func(val);
        }
    }
    return '';
}
/**
 * 增加自定义函数
 * @param func
 * @param name
 */
render.prototype.addFunc = function (func, name) {
    this.funcs[name] = func;
}


var RenderFuncs = {};
/**
 * 默认值
 * @param val
 * @param defaultVal
 * @returns {*}
 */
function defaultValue(val, defaultVal) {
    if (val) {
        return val;
    } else {
        return defaultVal;
    }
}
/**
 * 初始化自定义函数
 * @param cache
 */
function initFuncs(cache) {
    cache['defaultValue'] = defaultValue;
}

